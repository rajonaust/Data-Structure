// Binary Indexed Tree
// add a value from any index and find the summation from any index to another index
#include <cstdio>
int tree[3*100000+10];
int arr[3*100000+10];
void update(int idx,int V,int N) //N is the size of the array, V is the number to add
{
    while(idx<=N)
    {
        tree[idx]+=V;
        idx+=idx&(-idx);
    }
}
int query(int idx)
{
    int sum=0;
    while(idx>0)
    {
        sum=sum+tree[idx];
        idx-=idx&(-idx);
    }
    return sum;
}
int main()
{
    int N,Q; // N is the number of indexes of an array and Q is the number of query
    scanf("%d%d",&N,&Q);
    for(int i=1;i<=N;i++)
    {
        scanf("%d",&arr[i]);
        update(i,arr[i],N);
    }
    while(Q--)
    {
        int dir;
        scanf("%d",&dir); // If dir is 0 than add a integer in a index . If dir is 1 than return sum of a range.
        switch(dir)
        {
            case 0:
                    int index,V; // add integer V in index
                    scanf("%d%d",&index,&V);
                    update(index,V,N);
                    break;
            case 1:
                    int index1,index2;
                    scanf("%d%d",&index1,&index2); // return summation from the index1 to index2 in array
                    printf("%d\n",query(index2)-query(index1-1));
        }
    }
    return 0;
}

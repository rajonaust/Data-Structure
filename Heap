/* Heap Function */
/*
Time Complexity
1. clear O(1)
2. size O(1)
3. front O(1)
4. insert O(logN)
5. remove O(log N)
*/
struct heap
{
    int cnt , arr[100000+10] ;
    heap()
    {
        cnt = 0 ;
    }
    void clear()
    {
        cnt = 0 ;
    }
    int size()
    {
        return cnt ;
    }
    void swap(int *a,int *b)
    {
        int t = *a ;
        *a = *b ;
        *b = t ;
    }
    void insert(int a)
    {
        arr[++cnt] = a ;
        int ch = cnt ;
        while(ch/2>0)
        {
            if(arr[ch]<arr[ch/2]) swap(&arr[ch/2],&arr[ch]); // Change '<' sign to '>' for max heap .
            else break ;
            ch/=2;
        }
    }
    void remove()
    {
        arr[1] = arr[cnt--] ;
        int p = 1 ;
        while(2*p<=cnt)
        {
            int ch = 2*p ;
            if(ch+1<=cnt)
            {
                if(arr[ch+1]<arr[ch]) ch++; // Change '<' sign to '>' for max heap .
            }
            if(arr[ch]<arr[p]) swap(&arr[p],&arr[ch]); // Change '<' sign to '>' for max heap .
            else break ;
            p = ch ;
        }
    }
    int front()
    {
        return arr[1] ;
    }
};

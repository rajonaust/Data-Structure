// Range Minimum Query
// Dynamic Programming Method
// Given N ( 0..N-1 ) numbers and Q queries . For each query gives two integer L , R ( 0<=L<=R<N ) . Find minimum number from the interval L to R .
// Time Complexity - Construct Sparse Table O(NlogN) , Each query O(1) .
// Memory for Sparse Table <NlogN> .

#include <iostream>
#include <cmath>
using namespace std ;

int N , Q , A[100000+10] ;
int ST[25][100000+10]; // Sparse Table

void constructST()
{
    for(int i=0;i<N;i++) ST[0][i] = A[i] ;

    for(int k=1;(1<<k)<N;k++)
    {
        for(int i=0;i+(1<<k)<=N;i++)
        {
            ST[k][i] = min(ST[k-1][i],ST[k-1][i+(1<<(k-1))]); // Change min into max for maximum number .
        }
    }
}

int query(int L,int R)
{
    int k = log2(R-L);
    if(L==R) k = 0 ;
    return min(ST[k][L],ST[k][R-(1<<k)+1]); // Change min into max for maximum number .
}

int main()
{
    cin >> N >> Q ;
    for(int i=0;i<N;i++) cin >> A[i] ;

    constructST();

    while( Q-- )
    {
        int L , R ;
        cin >> L >> R ;
        cout << query(L,R) << endl ;
    }

    return 0 ;
}

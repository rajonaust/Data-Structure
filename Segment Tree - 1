// RMQ (Range Minimmum Query) with Segment Tree
// Given value of array . Change any index value . Find lowest value from any index to another index in array
// For every update and query function time complexity O(logn)
#include <iostream>
#include <stdio.h>
using namespace std;
#define infinite 10000000
int arr[100000+5];
int tree[3*100000+5];
void init(int node,int low,int high)
{
    if(low==high)
    {
         tree[node]=arr[low];
         return;
    }
    int left=2*node,right=2*node+1,mid=(low+high)/2;
    init(left,low,mid);
    init(right,mid+1,high);
    tree[node]=min(tree[left],tree[right]);
}
void update(int node,int low,int high,int a,int value)
{
    if(a>high||a<low) return; // Out of range
    if(low==a&&high==a) // find a range
    {
        tree[node] = value ;
        return;
    }
    int left=node*2,right=node*2+1,mid=(low+high)/2;
    update(left,low,mid,a,value);
    update(right,mid+1,high,a,value);
    tree[node]=min(tree[left],tree[right]);
}
int query(int node,int low,int high,int a,int b)
{
    if(a>high||b<low) return infinite; // Out of range . That's why send a infinite value.
    if(low>=a&&high<=b) return tree[node];// Find a range
    int left=node*2,right=node*2+1,mid=(low+high)/2;
    int p1=query(left,low,mid,a,b);
    int p2=query(right,mid+1,high,a,b);
    return min(p1,p2);
}
int main()
{
    int N,Q; // N is the number of indexes in range and Q is the number of queries.
    scanf("%d%d",&N,&Q);
    for(int i=1;i<=N;i++) scanf("%d",&arr[i]);
    init(1,1,N); // Build Segment Tree.
    while(Q--)
    {
        int direction; // If direction is 0 than update . If direction is 1 than Find the lowest value
        scanf("%d",&direction);
        if(direction==0)
        {
            int index,value; // Change the array index into value
            scanf("%d%d",&index,&value);
            update(1,1,N,index,value);
        }
        else
        {
            int index1,index2; // Find the lowest value from index1 to index2 in the array
            scanf("%d%d",&index1,&index2);
            printf("%d\n",query(1,1,N,index1,index2));
        }
    }
    return 0;
}
